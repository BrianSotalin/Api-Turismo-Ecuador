name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Set environment variables for deployment
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV  
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> $GITHUB_ENV  

      - name: Save SSL Certificate for RDS
        run: |
          echo "${{ secrets.RDS_SSL_CERTIFICATE }}" > rds-combined-ca-bundle.pem

      - name: Copy files to EC2
        run: |
          rsync -avz -e "ssh -i ec2_key.pem -o StrictHostKeyChecking=no" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/api-turismo
      - name: Create .env file on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cat <<EOT > /home/${{ secrets.EC2_USER }}/api-turismo/.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASS=${{ secrets.DB_PASS }}
            DB_SSL=true
            EOT
          EOF
      - name: SSH into EC2 and deploy
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/api-turismo
            # Detener y eliminar el contenedor si existe
            docker stop node-api-turismo || true
            docker rm node-api-turismo || true
            # Detener y eliminar el contenedor si existe
            docker rmi api-turismo || true
            # Construir la nueva imagen
            docker build -t api-turismo .
            # Ejecutar contenedor usando el archivo .env
            docker run -d -p 3000:3000 --name node-api-turismo --env-file .env --mount type=bind,source=$(pwd)/rds-combined-ca-bundle.pem,target=/app/rds-combined-ca-bundle.pem api-turismo
          EOF
